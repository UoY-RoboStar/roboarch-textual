/********************************************************************************
 * Copyright (c) 2022 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   William Barnett - initial definition
 ********************************************************************************/

/*
 * generated by Xtext 2.23.0
 */
package circus.robocalc.roboarch.textual.ui.contentassist;

import com.google.inject.Inject
import circus.robocalc.roboarch.textual.validation.RoboArchAccessibility
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.CrossReference
import circus.robocalc.robochart.Event
import circus.robocalc.roboarch.RoboArchPackage
import circus.robocalc.robochart.textual.RoboChartQualifiedNameConverter
import circus.robocalc.robochart.RoboChartPackage
import circus.robocalc.robochart.Variable

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class RoboArchProposalProvider extends AbstractRoboArchProposalProvider {
	
	@Inject extension RoboArchAccessibility;
	
	
	override void completeSkillConnection_StartOutput(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){

		lookupCrossReference(assignment.getTerminal() as CrossReference, context, acceptor) [ description |
			(description.getEObjectOrProxy as Variable).isAccessibleFrom(model, RoboArchPackage.Literals.SKILL_CONNECTION__START_OUTPUT)
		]
	}
	
	override void completeSkillConnection_EndInput(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference( assignment.getTerminal() as CrossReference, context, acceptor) [ description |
			(description.getEObjectOrProxy as Variable).isAccessibleFrom(model, RoboArchPackage.Literals.SKILL_CONNECTION__END_INPUT)
		];
	}
	
	override void completeConnection_Efrom(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		lookupCrossReference(assignment.getTerminal() as CrossReference, context, acceptor) [ description |
			(description.getEObjectOrProxy as Event).isAccessibleFrom(model, RoboChartPackage.Literals.CONNECTION__EFROM)
		]
	}
	
	override void completeConnection_Eto(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
		lookupCrossReference(assignment.getTerminal() as CrossReference, context, acceptor) [ description |
			(description.getEObjectOrProxy as Event).isAccessibleFrom(model, RoboChartPackage.Literals.CONNECTION__ETO)
		]
	}
	
	/* override void completeMonitor_Inputs(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference( assignment.getTerminal() as CrossReference, context, acceptor) [ description |
			(description.getEObjectOrProxy as Variable).isAccessibleFrom(model, RoboArchPackage.Literals.MONITOR__INPUTS)
		];
	} TODO */
	
}

/********************************************************************************
 * Copyright (c) 2022 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   William Barnett - initial definition
 ********************************************************************************/

grammar circus.robocalc.roboarch.textual.RoboArch with circus.robocalc.robochart.textual.RoboChart
import "http://www.robocalc.circus/RoboArch"
import "http://www.robocalc.circus/RoboChart" as robochart

System: 
	'system' name=ID 
	       (
	           imports+= Import |
	           definitions+= TypeDecl |  
	           functions += Function |
	           layers+= Layer |
	           interfaces+= Interface |
	           robot= RoboticPlatformDef |
	           ('connections' '='  connections+=Connection (',' connections+=Connection)*  ';' ) 
			)*
;


/**********************************************
 *   Layer Definition
 **********************************************/
	
Layer: 'layer' (GenericLayer |ControlLayer | ExecutiveLayer | PlanningLayer) ';' ; 

Pattern:  'pattern' '=' (ReactiveSkills | Htn) ;



GenericLayer: 
    name=ID  '{' 
	  (	('inputs' '='  inputs+=Event (',' inputs+=Event)* ';') |
		('outputs' '='  outputs+=Event (',' outputs+=Event)* ';') |
		('uses'  interfaces+=[robochart::Interface]  ) |
		('requires' rinterfaces+=[robochart::Interface] ) )*
	'}'
;
	
ControlLayer:	
     name=ID ':' 'ControlLayer' '{' 
      ( ('inputs' '='  inputs+=Event (',' inputs+=Event)* ';') |  
		('outputs' '='  outputs+=Event (',' outputs+=Event)* ';') |  
		('uses'  interfaces+=[robochart::Interface] )  |
		('requires' rinterfaces+=[robochart::Interface] )  |
		( pattern = Pattern ) )*
	 '}'
; 

ExecutiveLayer:	
	name=ID ':' 'ExecutiveLayer' '{'
	  ( ('inputs' '='  inputs+=Event (',' inputs+=Event)* ';')  |
        ('outputs' '='  outputs+=Event (',' outputs+=Event)* ';')  | 
	    ( pattern = Pattern ) )*
    '}'
;

PlanningLayer: 
	name=ID ':' 'PlanningLayer' '{'
	  ( ('inputs' '='  inputs+=Event (',' inputs+=Event)* ';') |
		('outputs' '='  outputs+=Event (',' outputs+=Event)* ';') |
	    ( pattern = Pattern ) )*
    '}'
;


//Connections: 
    
//;


@Override
Connection returns robochart::Connection:
    from=[robochart::ConnectionNode] 'on' efrom=[robochart::Event] 'to'  to=[robochart::ConnectionNode] 'on' eto=[robochart::Event]
;

/**********************************************
 *  Pattern: EXECUTIVE HTN
 **********************************************/
 
  Htn:
	    'Htn' ';'
;

/**********************************************
 *  Pattern: PLANNING HTN
 **********************************************/
//TODO


/**********************************************
 *   Pattern: REACTIVE SKILLS
 **********************************************/
 
 ReactiveSkills:
	'ReactiveSkills' ';' 
	  ( 'skills' '=' skills += Skill (',' skills += Skill)* ';'   |
	   	skillsManager = SkillsManager )* 
;



Skill:
	CSkill | DSkill
;


CSkill:
    ( async ?= 'async' )? 'cskill'  name=ID '{'   
	           (  ( 'priority' '=' priority=INT ';')?
	             ('parameters' '=' parameters+=Variable (',' parameters+=Variable)* ';') |
	             ('inputs' '=' inputs+=Variable (',' inputs+=Variable)* ';') | 
	             ('outputs' '=' outputs+= Variable (',' outputs+= Variable)* ';')
//	             computationalTransform=SkillComputationalTransform
                   )*
	         '}'
;

DSkill:
	'dskill'  name=ID '{' 
			   ( ( 'priority' '=' priority=INT ';')?
	             ('parameters' '=' parameters+=Variable (',' parameters+=Variable)* ';') |
	             ('inputs' '=' inputs+=Variable (',' inputs+=Variable)* ';') |
	             ('outputs' '=' outputs+=Variable (',' outputs+=Variable)* ';') )*
	         '}'
;


SkillsManager:
    ('connections' '='  interskillconnections+=SkillConnection (',' interskillconnections+=SkillConnection)*  ';' ) & 
	('monitors' '='  stateMonitors+=Monitor (',' stateMonitors+=Monitor)*   ';' )?  
; //The use of unordered groups allows skills manager components to be specified separately


SkillConnection:
	    start = [Skill] 'on' startOutput = [robochart::Variable] 'to' end=[Skill] 'on' endInput = [robochart::Variable] 
;

Monitor: 
	 '(' name=ID '|'  condition= Expression ')'
;


//robochart.Variable:
//	name= ID ':' type=Type 
//;


/* Not required unless there needs to be an extension to RoboChart concepts.
 
@Override
Atomic returns robochart::Expression:
	super |
	VariableExp
;

VariableExp:
	{VariableExp}	skill= [Skill] '->'	Variable= [Variable] 	
;

*/ 


/**********************************************
 *  Layer Approach: Subsumption
 **********************************************/
//TODO



/**********************************************
 *   Utility
 **********************************************/

Combiner:
	'combiner' name=ID inputs=INT (type=ID)?;

Distributor:
	'distributor' name=ID outputs=INT (type=ID)?;
	



/**********************************************
 *   RoboChart
 **********************************************/

// TODO Use RoboChart's definition when enum qualified name clash is fixed. 	
@Override 
QualifiedName:
	ID ('¦¦' ID)*
;

@Override 
QualifiedNameWithWildcard:
	QualifiedName '¦¦*'?
;
	
	
@Override 
RefExp returns robochart::RefExp:
	{robochart::RefExp} ref=[robochart::NamedExpression | QualifiedName]
;

@Override
Event returns robochart::Event:
	 name=ID (':' type=Type)?
;
 
 
@Override
Interface returns robochart::Interface:
	{robochart::Interface}'interface' name=ID '{'
		(
			operations+=OperationSig |
			'event' events+=Event |
			variableList+=VariableList 
		)*
	'}'
;
 
 	


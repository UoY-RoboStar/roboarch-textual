/********************************************************************************
 * Copyright (c) 2022 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   William Barnett - initial definition
 ********************************************************************************/

/*
 * generated by Xtext 2.23.0
 */
package circus.robocalc.roboarch.textual;

import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

import circus.robocalc.roboarch.textual.scoping.RoboArchImportURIGlobalScopeProvider;
import circus.robocalc.roboarch.textual.scoping.RoboArchImportedNamespaceAwareLocalScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class RoboArchRuntimeModule extends AbstractRoboArchRuntimeModule {
	

	public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		return RoboArchQualifiedNameConverter.class;
	}
	
	@Override 
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
    	return RoboArchImportURIGlobalScopeProvider.class;
	}
	
	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider.class).annotatedWith(
			Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)
		).to(
				RoboArchImportedNamespaceAwareLocalScopeProvider.class
		);
	}
	

}

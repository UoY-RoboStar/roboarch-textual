/********************************************************************************
 * Copyright (c) 2022 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   William Barnett - initial definition
 ********************************************************************************/

/*
 * generated by Xtext 2.23.0
 */
package circus.robocalc.roboarch.textual.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.Assert
import static org.junit.Assert.assertEquals
import static org.junit.Assert.assertTrue
import circus.robocalc.roboarch.ControlLayer
import org.junit.runner.RunWith
import circus.robocalc.roboarch.GenericLayer
import circus.robocalc.roboarch.ExecutiveLayer
import circus.robocalc.roboarch.PlanningLayer
import circus.robocalc.roboarch.ReactiveSkills

@ExtendWith(InjectionExtension)
@InjectWith(RoboArchInjectorProvider)
class RoboArchParsingTest {
	
	@Inject extension ParseHelper<circus.robocalc.roboarch.System>
	@Inject extension ValidationTestHelper

/* These tests are to ensure the structure of the model are correctly parsed from the
 * RoboArch textual description.
 */
	
	@Test
	def void ParseSingleWordTest() {
		
		val model = '''Test'''.parse

	}
	
	@Test
	def void parseEmptySystemTest() {
		val model = '''
			system test
		'''.parse
		
		Assert.assertEquals("test", model.name)	
	}
	
	@Test
	def void parseSingleTypeTest() {
		val model = '''
			system test
			
			type Ptyp
		'''.parse
		
		var type = model.definitions.get(0)
		
		assertEquals("Ptyp", type.name)
	}

	@Test
	def void parseSingleInterfaceTest() {
		val model = '''
			system test
			
			interface iface {  }
		'''.parse
		
		var interface = model.interfaces.get(0)
		
		assertEquals("iface", interface.name)
	}
	
	@Test
	def void parseEmptyLayerTest() {
		val model = '''
			system test 
			
			layer lyr { }
		'''.parse
		
		var layer = model.layers.get(0)
		
		assertEquals("lyr", layer.name)
		assertTrue(  layer instanceof GenericLayer )
	}

	@Test
	def void parseControlLayerTest() {
		val model = '''
			system test
			
			layer lyr:ControlLayer { }
		'''.parse
		
		var layer = model.layers.get(0)
		
		assertEquals("lyr", layer.name)
		assertTrue(  layer instanceof ControlLayer )
	}

	@Test
	def void parseExecutiveLayerTest() {
		val model = '''
			system test
			
			layer lyr:ExecutiveLayer {} 
		'''.parse
	
		var layer = model.layers.get(0)
		
		assertEquals("lyr", layer.name)
		assertTrue(  layer instanceof ExecutiveLayer )
	}

	@Test
	def void parsePlanningLayerTest() {
		val model = '''
			system test
			
			layer lyr:PlanningLayer
		'''.parse

		var layer = model.layers.get(0)
		
		assertEquals("lyr", layer.name)
		assertTrue(  layer instanceof PlanningLayer )

	}
	
	@Test
	def void parsePatternReactiveSkillsTest() {
		val model = '''
			system test
			
			layer lyr:ControlLayer {
				pattern = ReactiveSkills {
					skills= ;
				};
				
			};
		'''.parse
		
		var pattern = model.layers.get(0).pattern
		
		assertTrue(  pattern instanceof ReactiveSkills )
	}	

}
